// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/crhntr/gooseglass"
	goose "github.com/pressly/goose/v3"
)

type Provider struct {
	DownStub        func(context.Context) (*goose.MigrationResult, error)
	downMutex       sync.RWMutex
	downArgsForCall []struct {
		arg1 context.Context
	}
	downReturns struct {
		result1 *goose.MigrationResult
		result2 error
	}
	downReturnsOnCall map[int]struct {
		result1 *goose.MigrationResult
		result2 error
	}
	DownToStub        func(context.Context, int64) ([]*goose.MigrationResult, error)
	downToMutex       sync.RWMutex
	downToArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	downToReturns struct {
		result1 []*goose.MigrationResult
		result2 error
	}
	downToReturnsOnCall map[int]struct {
		result1 []*goose.MigrationResult
		result2 error
	}
	StatusStub        func(context.Context) ([]*goose.MigrationStatus, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		arg1 context.Context
	}
	statusReturns struct {
		result1 []*goose.MigrationStatus
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 []*goose.MigrationStatus
		result2 error
	}
	UpStub        func(context.Context) ([]*goose.MigrationResult, error)
	upMutex       sync.RWMutex
	upArgsForCall []struct {
		arg1 context.Context
	}
	upReturns struct {
		result1 []*goose.MigrationResult
		result2 error
	}
	upReturnsOnCall map[int]struct {
		result1 []*goose.MigrationResult
		result2 error
	}
	UpToStub        func(context.Context, int64) ([]*goose.MigrationResult, error)
	upToMutex       sync.RWMutex
	upToArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	upToReturns struct {
		result1 []*goose.MigrationResult
		result2 error
	}
	upToReturnsOnCall map[int]struct {
		result1 []*goose.MigrationResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Provider) Down(arg1 context.Context) (*goose.MigrationResult, error) {
	fake.downMutex.Lock()
	ret, specificReturn := fake.downReturnsOnCall[len(fake.downArgsForCall)]
	fake.downArgsForCall = append(fake.downArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.DownStub
	fakeReturns := fake.downReturns
	fake.recordInvocation("Down", []interface{}{arg1})
	fake.downMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) DownCallCount() int {
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	return len(fake.downArgsForCall)
}

func (fake *Provider) DownCalls(stub func(context.Context) (*goose.MigrationResult, error)) {
	fake.downMutex.Lock()
	defer fake.downMutex.Unlock()
	fake.DownStub = stub
}

func (fake *Provider) DownArgsForCall(i int) context.Context {
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	argsForCall := fake.downArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Provider) DownReturns(result1 *goose.MigrationResult, result2 error) {
	fake.downMutex.Lock()
	defer fake.downMutex.Unlock()
	fake.DownStub = nil
	fake.downReturns = struct {
		result1 *goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) DownReturnsOnCall(i int, result1 *goose.MigrationResult, result2 error) {
	fake.downMutex.Lock()
	defer fake.downMutex.Unlock()
	fake.DownStub = nil
	if fake.downReturnsOnCall == nil {
		fake.downReturnsOnCall = make(map[int]struct {
			result1 *goose.MigrationResult
			result2 error
		})
	}
	fake.downReturnsOnCall[i] = struct {
		result1 *goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) DownTo(arg1 context.Context, arg2 int64) ([]*goose.MigrationResult, error) {
	fake.downToMutex.Lock()
	ret, specificReturn := fake.downToReturnsOnCall[len(fake.downToArgsForCall)]
	fake.downToArgsForCall = append(fake.downToArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.DownToStub
	fakeReturns := fake.downToReturns
	fake.recordInvocation("DownTo", []interface{}{arg1, arg2})
	fake.downToMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) DownToCallCount() int {
	fake.downToMutex.RLock()
	defer fake.downToMutex.RUnlock()
	return len(fake.downToArgsForCall)
}

func (fake *Provider) DownToCalls(stub func(context.Context, int64) ([]*goose.MigrationResult, error)) {
	fake.downToMutex.Lock()
	defer fake.downToMutex.Unlock()
	fake.DownToStub = stub
}

func (fake *Provider) DownToArgsForCall(i int) (context.Context, int64) {
	fake.downToMutex.RLock()
	defer fake.downToMutex.RUnlock()
	argsForCall := fake.downToArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Provider) DownToReturns(result1 []*goose.MigrationResult, result2 error) {
	fake.downToMutex.Lock()
	defer fake.downToMutex.Unlock()
	fake.DownToStub = nil
	fake.downToReturns = struct {
		result1 []*goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) DownToReturnsOnCall(i int, result1 []*goose.MigrationResult, result2 error) {
	fake.downToMutex.Lock()
	defer fake.downToMutex.Unlock()
	fake.DownToStub = nil
	if fake.downToReturnsOnCall == nil {
		fake.downToReturnsOnCall = make(map[int]struct {
			result1 []*goose.MigrationResult
			result2 error
		})
	}
	fake.downToReturnsOnCall[i] = struct {
		result1 []*goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) Status(arg1 context.Context) ([]*goose.MigrationStatus, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StatusStub
	fakeReturns := fake.statusReturns
	fake.recordInvocation("Status", []interface{}{arg1})
	fake.statusMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *Provider) StatusCalls(stub func(context.Context) ([]*goose.MigrationStatus, error)) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = stub
}

func (fake *Provider) StatusArgsForCall(i int) context.Context {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	argsForCall := fake.statusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Provider) StatusReturns(result1 []*goose.MigrationStatus, result2 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 []*goose.MigrationStatus
		result2 error
	}{result1, result2}
}

func (fake *Provider) StatusReturnsOnCall(i int, result1 []*goose.MigrationStatus, result2 error) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 []*goose.MigrationStatus
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 []*goose.MigrationStatus
		result2 error
	}{result1, result2}
}

func (fake *Provider) Up(arg1 context.Context) ([]*goose.MigrationResult, error) {
	fake.upMutex.Lock()
	ret, specificReturn := fake.upReturnsOnCall[len(fake.upArgsForCall)]
	fake.upArgsForCall = append(fake.upArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.UpStub
	fakeReturns := fake.upReturns
	fake.recordInvocation("Up", []interface{}{arg1})
	fake.upMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) UpCallCount() int {
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	return len(fake.upArgsForCall)
}

func (fake *Provider) UpCalls(stub func(context.Context) ([]*goose.MigrationResult, error)) {
	fake.upMutex.Lock()
	defer fake.upMutex.Unlock()
	fake.UpStub = stub
}

func (fake *Provider) UpArgsForCall(i int) context.Context {
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	argsForCall := fake.upArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Provider) UpReturns(result1 []*goose.MigrationResult, result2 error) {
	fake.upMutex.Lock()
	defer fake.upMutex.Unlock()
	fake.UpStub = nil
	fake.upReturns = struct {
		result1 []*goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) UpReturnsOnCall(i int, result1 []*goose.MigrationResult, result2 error) {
	fake.upMutex.Lock()
	defer fake.upMutex.Unlock()
	fake.UpStub = nil
	if fake.upReturnsOnCall == nil {
		fake.upReturnsOnCall = make(map[int]struct {
			result1 []*goose.MigrationResult
			result2 error
		})
	}
	fake.upReturnsOnCall[i] = struct {
		result1 []*goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) UpTo(arg1 context.Context, arg2 int64) ([]*goose.MigrationResult, error) {
	fake.upToMutex.Lock()
	ret, specificReturn := fake.upToReturnsOnCall[len(fake.upToArgsForCall)]
	fake.upToArgsForCall = append(fake.upToArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.UpToStub
	fakeReturns := fake.upToReturns
	fake.recordInvocation("UpTo", []interface{}{arg1, arg2})
	fake.upToMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) UpToCallCount() int {
	fake.upToMutex.RLock()
	defer fake.upToMutex.RUnlock()
	return len(fake.upToArgsForCall)
}

func (fake *Provider) UpToCalls(stub func(context.Context, int64) ([]*goose.MigrationResult, error)) {
	fake.upToMutex.Lock()
	defer fake.upToMutex.Unlock()
	fake.UpToStub = stub
}

func (fake *Provider) UpToArgsForCall(i int) (context.Context, int64) {
	fake.upToMutex.RLock()
	defer fake.upToMutex.RUnlock()
	argsForCall := fake.upToArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Provider) UpToReturns(result1 []*goose.MigrationResult, result2 error) {
	fake.upToMutex.Lock()
	defer fake.upToMutex.Unlock()
	fake.UpToStub = nil
	fake.upToReturns = struct {
		result1 []*goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) UpToReturnsOnCall(i int, result1 []*goose.MigrationResult, result2 error) {
	fake.upToMutex.Lock()
	defer fake.upToMutex.Unlock()
	fake.UpToStub = nil
	if fake.upToReturnsOnCall == nil {
		fake.upToReturnsOnCall = make(map[int]struct {
			result1 []*goose.MigrationResult
			result2 error
		})
	}
	fake.upToReturnsOnCall[i] = struct {
		result1 []*goose.MigrationResult
		result2 error
	}{result1, result2}
}

func (fake *Provider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Provider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gooseglass.Provider = new(Provider)
