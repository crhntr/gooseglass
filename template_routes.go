// Code generated by muxt generate --receiver-type=Provider --receiver-type-package=github.com/pressly/goose/v3 --receiver-interface=migrationProvider --routes-func routes --template-data-type templateData. DO NOT EDIT.
// muxt version: v0.18.0-dev.1
package gooseglass

import (
	"bytes"
	"cmp"
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"strconv"

	goose "github.com/pressly/goose/v3"
)

type migrationProvider interface {
	Status(ctx context.Context) ([]*goose.MigrationStatus, error)
	Down(ctx context.Context) (*goose.MigrationResult, error)
	Up(ctx context.Context) ([]*goose.MigrationResult, error)
}

func routes(mux *http.ServeMux, receiver migrationProvider) {
	mux.HandleFunc("GET /", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		result, err := receiver.Status(ctx)
		if err != nil {
			var zv []*goose.MigrationStatus
			rd := newtemplateData(receiver, response, request, zv, false, err)
			buf := bytes.NewBuffer(nil)
			if err := templates.ExecuteTemplate(buf, "GET / Status(ctx)", rd); err != nil {
				slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
				http.Error(response, "failed to render page", http.StatusInternalServerError)
				return
			}
			sc := cmp.Or(rd.statusCode, http.StatusInternalServerError)
			if rd.redirectURL != "" {
				http.Redirect(response, request, rd.redirectURL, sc)
				return
			}
			if contentType := response.Header().Get("content-type"); contentType == "" {
				response.Header().Set("content-type", "text/html; charset=utf-8")
			}
			response.Header().Set("content-length", strconv.Itoa(buf.Len()))
			response.WriteHeader(sc)
			_, _ = buf.WriteTo(response)
			return
		}
		td := newtemplateData(receiver, response, request, result, true, nil)
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "GET / Status(ctx)", td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("POST /down", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		result, err := receiver.Down(ctx)
		if err != nil {
			var zv *goose.MigrationResult
			rd := newtemplateData(receiver, response, request, zv, false, err)
			buf := bytes.NewBuffer(nil)
			if err := templates.ExecuteTemplate(buf, "POST /down Down(ctx)", rd); err != nil {
				slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
				http.Error(response, "failed to render page", http.StatusInternalServerError)
				return
			}
			sc := cmp.Or(rd.statusCode, http.StatusInternalServerError)
			if rd.redirectURL != "" {
				http.Redirect(response, request, rd.redirectURL, sc)
				return
			}
			if contentType := response.Header().Get("content-type"); contentType == "" {
				response.Header().Set("content-type", "text/html; charset=utf-8")
			}
			response.Header().Set("content-length", strconv.Itoa(buf.Len()))
			response.WriteHeader(sc)
			_, _ = buf.WriteTo(response)
			return
		}
		td := newtemplateData(receiver, response, request, result, true, nil)
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "POST /down Down(ctx)", td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("POST /up", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		result, err := receiver.Up(ctx)
		if err != nil {
			var zv []*goose.MigrationResult
			rd := newtemplateData(receiver, response, request, zv, false, err)
			buf := bytes.NewBuffer(nil)
			if err := templates.ExecuteTemplate(buf, "POST /up Up(ctx)", rd); err != nil {
				slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
				http.Error(response, "failed to render page", http.StatusInternalServerError)
				return
			}
			sc := cmp.Or(rd.statusCode, http.StatusInternalServerError)
			if rd.redirectURL != "" {
				http.Redirect(response, request, rd.redirectURL, sc)
				return
			}
			if contentType := response.Header().Get("content-type"); contentType == "" {
				response.Header().Set("content-type", "text/html; charset=utf-8")
			}
			response.Header().Set("content-length", strconv.Itoa(buf.Len()))
			response.WriteHeader(sc)
			_, _ = buf.WriteTo(response)
			return
		}
		td := newtemplateData(receiver, response, request, result, true, nil)
		buf := bytes.NewBuffer(nil)
		if err := templates.ExecuteTemplate(buf, "POST /up Up(ctx)", td); err != nil {
			slog.ErrorContext(request.Context(), "failed to render page", slog.String("path", request.URL.Path), slog.String("pattern", request.Pattern), slog.String("error", err.Error()))
			http.Error(response, "failed to render page", http.StatusInternalServerError)
			return
		}
		statusCode := cmp.Or(td.statusCode, http.StatusOK)
		if td.redirectURL != "" {
			http.Redirect(response, request, td.redirectURL, statusCode)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
}

type templateData[T any] struct {
	receiver    migrationProvider
	response    http.ResponseWriter
	request     *http.Request
	result      T
	statusCode  int
	okay        bool
	err         error
	redirectURL string
}

func newtemplateData[T any](receiver migrationProvider, response http.ResponseWriter, request *http.Request, result T, okay bool, err error) *templateData[T] {
	return &templateData[T]{receiver: receiver, response: response, request: request, result: result, okay: okay, err: err, redirectURL: ""}
}

func (data *templateData[T]) MuxtVersion() string {
	const muxtVersion = "v0.18.0-dev.1"
	return muxtVersion
}

func (data *templateData[T]) Path() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (data *templateData[T]) Result() T {
	return data.result
}

func (data *templateData[T]) Request() *http.Request {
	return data.request
}

func (data *templateData[T]) StatusCode(statusCode int) *templateData[T] {
	data.statusCode = statusCode
	return data
}

func (data *templateData[T]) Header(key, value string) *templateData[T] {
	data.response.Header().Set(key, value)
	return data
}

func (data *templateData[T]) Ok() bool {
	return data.okay
}

func (data *templateData[T]) Err() error {
	return data.err
}

func (data *templateData[T]) Receiver() migrationProvider {
	return data.receiver
}

func (data *templateData[T]) Redirect(url string, code int) (*templateData[T], error) {
	if code < 300 || code >= 400 {
		return data, fmt.Errorf("invalid status code %d for redirect", code)
	}
	data.redirectURL = url
	return data.StatusCode(code), nil
}

type TemplateRoutePaths struct {
}

func (TemplateRoutePaths) Status() string {
	return "/"
}

func (TemplateRoutePaths) Down() string {
	return "/down"
}

func (TemplateRoutePaths) Up() string {
	return "/up"
}

// MIT License
//
// Copyright (c) 2025 Christopher Hunter
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

